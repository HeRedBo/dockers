services:
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql-${MYSQL_VERSION}
    #使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限
    #设置为true，不然数据卷可能挂载不了，启动不起
    privileged: true
    restart: always
    ports:
      - "${MYSQL_PORT}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASS: ${MYSQL_PASSWORD}
      TZ: Asia/Shanghai
    command:
      --wait_timeout=31536000
      --interactive_timeout=31536000
      --max_connections=1000
      --default-authentication-plugin=mysql_native_password
    volumes:
      #映射mysql的数据目录到宿主机，保存数据
      - "./mysql/data:/var/lib/mysql"
      #根据宿主机下的配置文件创建容器
      - "./mysql/config/my.cnf:/etc/mysql/my.cnf"
  redis:
      image: redis:6.0.9-buster
      container_name: redis
      restart: always
      ports:
        - "${REDIS_PORT}:6379"
      volumes:
        - ./redis/redis.conf:/etc/redis/redis.conf:rw
        - ./redis/redis-server.log:/var/log/redis/redis-server.log:rw
        - ./redis/data:/data:rw
      command:
        # 执行的命令
        redis-server /etc/redis/redis.conf --appendonly yes
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        STACK_VERSION: ${STACK_VERSION}
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms2g -Xmx2g
      - xpack.security.enabled=true  # 可选，关闭安全认证（测试用）
      - xpack.security.http.ssl.enabled=false
      - cluster.routing.allocation.disk.threshold_enabled=false  # 关闭磁盘水位检查（测试环境用）
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    volumes:
      - ./elasticsearch/esdata:/usr/share/elasticsearch/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - elastic
    ports:
      - "${ES_PORT}:9200"
      - "${ES_TRANSPORT_PORT}:9300"  
    command: >
      bash -c '
        # 检查环境变量是否设置
        if [ -z "$${ELASTIC_PASSWORD}" ]; then
          echo "ERROR: ELASTIC_PASSWORD must be set in .env file";
          exit 1;
        fi;
        if [ -z "$${KIBANA_PASSWORD}" ]; then
          echo "ERROR: KIBANA_PASSWORD must be set in .env file";
          exit 1;
        fi;
        
        # 启动 Elasticsearch 并等待服务就绪
        /usr/local/bin/docker-entrypoint.sh eswrapper &

        # 等待 Elasticsearch HTTP 端口可用
        echo "Waiting for Elasticsearch to start...";
        while ! curl -s http://localhost:9200; do sleep 30; done;

        # 设置 kibana_system 密码
        echo "Setting password for kibana_system...";
        curl -s -X POST -u "elastic:$${ELASTIC_PASSWORD}" \
          -H "Content-Type: application/json" \
          "http://localhost:9200/_security/user/kibana_system/_password" \
          -d "{\"password\":\"$${KIBANA_PASSWORD}\"}"
        echo "All done!";
        # 保持容器运行
        wait
      '      
    healthcheck:
      # test: ["CMD-SHELL", "curl -f -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health || exit 1"]
      test: ["CMD-SHELL", "curl -s -u elastic:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health | grep -qE 'yellow|green'"]
      interval: 10s
      timeout: 10s
      retries: 30
  kibana:
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
    volumes:  
      - ./kibana/data:/usr/share/kibana/data  
    networks:
      - elastic
    depends_on:
      elasticsearch:
        condition: service_healthy
    ports:
      - "${KIBANA_PORT}:5601"
  zookeeper:
    image: confluentinc/cp-zookeeper:${ZOOKEEPER_VERSION}
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      # 新版Confluent镜像需要以下格式
      KAFKA_ZOOKEEPER_CLIENT_PORT: 2181  
      ZOO_4LW_COMMANDS_WHITELIST: "*"  # 允许所有四字命令
    ports:
      - "${ZOOKEEPER_PORT}:2181"
    volumes:
      - ./zookeeper/data:/var/lib/zookeeper/data
      - ./zookeeper/log:/var/lib/zookeeper/log
    networks:
      - kafka-network  
  kafka:
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "${KAFKA_PORT}:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ADVERTISED_HOST_NAME: 127.0.0.1
      KAFKA_CREATE_TOPICS: "shop-order:1:1"
    volumes:
      - ./kafka/data:/var/lib/kafka/data
    networks:
      - kafka-network  

networks:
  elastic:
    driver: bridge
  kafka-network:
    driver: bridge    